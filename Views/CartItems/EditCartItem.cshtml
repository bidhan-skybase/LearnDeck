@model List<Ghayal_Bhaag.Models.CartItem>

@{
    ViewData["Title"] = "Edit Cart Items";
}

<div class="container py-4">
    <div class="row justify-content-center">
        <div class="col-md-10">
            <div class="card shadow">
                <div class="card-header bg-primary text-white">
                    <h4 class="mb-0">Edit Cart Items</h4>
                </div>
                <div class="card-body">
                    @if (TempData["ErrorMessage"] != null)
                    {
                        <div class="alert alert-danger alert-dismissible fade show" role="alert">
                            @TempData["ErrorMessage"]
                            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                        </div>
                    }
                    @if (TempData["SuccessMessage"] != null)
                    {
                        <div class="alert alert-success alert-dismissible fade show" role="alert">
                            @TempData["SuccessMessage"]
                            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                        </div>
                    }
                    @if (Model == null || !Model.Any())
                    {
                        <p class="text-muted">No items in the cart.</p>
                    }
                    else
                    {
                        <form asp-action="EditCartItem">
                            <div asp-validation-summary="ModelOnly" class="text-danger mb-3"></div>
                            <table class="table table-hover">
                                <thead>
                                    <tr>
                                        <th>Book</th>
                                        <th>Unit Price</th>
                                        <th>Quantity</th>
                                        <th>Subtotal</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @for (int i = 0; i < Model.Count; i++)
                                    {
                                        <tr>
                                            <td>
                                                @Html.DisplayFor(model => model[i].Book.BookTitle) (ID: @Html.DisplayFor(model => model[i].BookId))
                                                <input type="hidden" asp-for="@Model[i].CartItemId" />
                                                <input type="hidden" asp-for="@Model[i].UserId" />
                                                <input type="hidden" asp-for="@Model[i].BookId" />
                                                <input type="hidden" asp-for="@Model[i].UnitPrice" />
                                            </td>
                                            <td>Rs. @Html.DisplayFor(model => model[i].UnitPrice)</td>
                                            <td>
                                                <div class="input-group w-75">
                                                    <button class="btn btn-outline-secondary quantity-down" type="button">-</button>
                                                    <input asp-for="@Model[i].Quantity" class="form-control text-center quantity-input" type="number" min="1" data-stock="@Model[i].Book.Stock" />
                                                    <button class="btn btn-outline-secondary quantity-up" type="button">+</button>
                                                </div>
                                                <span asp-validation-for="@Model[i].Quantity" class="text-danger"></span>
                                            </td>
                                            <td>
                                                Rs. <span class="subtotal">@(Model[i].Quantity * Model[i].UnitPrice)</span>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                            <div class="d-flex justify-content-between mt-4">
                                <a asp-action="ListCartItems" class="btn btn-outline-secondary">Back to List</a>
                                <button type="submit" class="btn btn-primary">Save Changes</button>
                            </div>
                        </form>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const quantityInputs = document.querySelectorAll('.quantity-input');
            const quantityUps = document.querySelectorAll('.quantity-up');
            const quantityDowns = document.querySelectorAll('.quantity-down');

            quantityInputs.forEach((input, index) => {
                const maxStock = parseInt(input.dataset.stock) || 1;
                const unitPrice = parseFloat(@Json.Serialize(Model.Select(item => item.UnitPrice).ToArray()));
                const subtotalSpan = input.closest('tr').querySelector('.subtotal');

                function updateSubtotal() {
                    const quantity = parseInt(input.value) || 0;
                    const subtotal = (quantity * unitPrice).toFixed(2);
                    subtotalSpan.textContent = subtotal;
                }

                input.addEventListener('change', function() {
                    let value = parseInt(this.value);
                    if (isNaN(value) || value < 1) {
                        this.value = 1;
                    } else if (value > maxStock) {
                        this.value = maxStock;
                        alert(`Maximum stock available is ${maxStock}.`);
                    }
                    updateSubtotal();
                });

                quantityUps[index].addEventListener('click', function() {
                    let currentValue = parseInt(input.value) || 0;
                    if (currentValue < maxStock) {
                        input.value = currentValue + 1;
                        updateSubtotal();
                    } else {
                        alert(`Maximum stock available is ${maxStock}.`);
                    }
                });

                quantityDowns[index].addEventListener('click', function() {
                    let currentValue = parseInt(input.value) || 0;
                    if (currentValue > 1) {
                        input.value = currentValue - 1;
                        updateSubtotal();
                    }
                });

                // Initialize
                updateSubtotal();
            });
        });
    </script>
}