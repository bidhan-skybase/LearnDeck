@using System.Security.Claims
@model BookMart.Models.Book

@{
    ViewData["Title"] = "Book Details";
}

<div class="container py-5">
    <div class="row">
        <!-- Book Cover Image -->
        <div class="col-md-4">
            <div class="text-center">
                <img src="@(Model.Image ?? "https://via.placeholder.com/250x350")" alt="@Model.BookTitle"
                     class="img-fluid rounded shadow-sm" style="max-width: 250px;">
            </div>
        </div>

        <!-- Book Details -->
        <div class="col-md-8">
            <h2 class="mb-3">@Html.DisplayFor(model => model.BookTitle)</h2>
            <p class="text-muted mb-2">
                by @Html.DisplayFor(model => model.Author)
            </p>
            <div class="mb-3">
                <span class="badge bg-secondary">Paper Back</span>
                <span class="text-warning">★ N/A</span>
                <span class="text-muted">(@ViewData["ReviewCount"] Book Reviews)</span>
            </div>
            <p class="text-muted mb-2">Sold by BookMart Nepal</p>

            <!-- Synopsis -->
            <h4 class="mt-4">Synopsis</h4>
            <p class="text-secondary">@Html.DisplayFor(model => model.Description)</p>

            <!-- Price and Quantity -->
            <div class="d-flex align-items-center mb-3">
                <!-- Check if there is a discount (DiscountAmount > 0) -->
                @if (Model.DiscountAmount > 0)
                {
                    <!-- Show original price with strikethrough -->
                    <h4 class="me-3 mb-0 text-muted">
                        <s>Rs. @Model.Price</s>
                    </h4>
                    <!-- Show discounted price -->
                    <h4 class="me-3 mb-0 text-success">
                        Rs. @(Model.Price - Model.DiscountAmount)
                    </h4>
                }
                else
                {
                    <!-- Show only original price if no discount -->
                    <h4 class="me-3 mb-0">
                        Rs. @Model.Price
                    </h4>
                }
                <div class="input-group w-25">
                    <button class="btn btn-outline-secondary" type="button" id="quantityDown">-</button>
                    <input type="number" class="form-control text-center" value="1" min="1" id="quantity"
                           style="max-width: 70px;" data-stock="@Model.Stock">
                    <button class="btn btn-outline-secondary" type="button" id="quantityUp">+</button>
                </div>
                <span class="ms-3 text-muted">Available Stock: @Model.Stock</span>
            </div>

            @if (User.IsInRole("User"))
            {
                <form asp-controller="CartItems" asp-action="AddToCart" method="post">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="id" value="@Model.BookId" />
                    <input type="hidden" name="quantity" id="quantityInput" value="1" />
                    <button type="submit" class="btn btn-primary mb-3">Add to Cart</button>
                </form>
            }

            <h5>Genres:</h5>
            <div class="mb-3">
                @foreach (var genre in Model.Genre.Split(',').Select(g => g.Trim()))
                {
                    <span class="badge bg-light text-dark me-1">@genre</span>
                }
            </div>

            @if (User.IsInRole("User"))
            {
                <div class="mt-4">
                    <a asp-action="ListBooks" class="btn btn-outline-secondary me-2">Back to List</a>
                    @if (ViewData["has_purchased"]?.ToString() == "true")
                    {
                        <a asp-controller="Reviews" asp-action="CreateReview" asp-route-id="@Model?.BookId"
                           class="btn btn-outline-primary me-2">Write a Review</a>
                    }
                    <form asp-controller="Bookmarks" asp-action="CreateBookMark" method="post" class="d-inline">
                        <input type="hidden" name="BookId" value="@Model?.BookId" />
                        <input type="hidden" name="UserId" value="@User.FindFirstValue(ClaimTypes.NameIdentifier)" />
                        <button type="submit" class="btn btn-outline-success me-2">Add to Wishlist</button>
                    </form>
                </div>
            }
            @if (User.IsInRole("Admin"))
            {
                <a asp-controller="Books" asp-action="EditBook" asp-route-id="@Model?.BookId"
                   class="btn btn-primary mb-3">Edit</a>
                <a asp-controller="Books" asp-action="DeleteBook" asp-route-id="@Model?.BookId"
                   class="btn btn-danger mb-3">Delete</a>
            }

            <!-- Reviews Section -->
            <h4 class="mt-5">Customer Reviews</h4>
            @if (ViewBag.Reviews != null && ViewBag.Reviews.Count > 0)
            {
                <div class="reviews-list">
                    @foreach (var review in ViewBag.Reviews)
                    {
                        <div class="border-bottom py-3">
                            <div class="d-flex justify-content-between">
                                <h6 class="mb-1">@review.User.UserName</h6>
                                <small class="text-muted">@review.CreatedDate?.ToString("MMM dd, yyyy")</small>
                            </div>
                            <p class="mb-0">@review.description</p>
                        </div>
                    }
                </div>
            }
            else
            {
                <p class="text-muted">No reviews yet. Be the first to write a review!</p>
            }
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const quantityInput = document.getElementById('quantity');
        const hiddenQuantityInput = document.getElementById('quantityInput');
        const quantityUp = document.getElementById('quantityUp');
        const quantityDown = document.getElementById('quantityDown');
        const maxStock = parseInt(quantityInput.getAttribute('data-stock'));

        // Update the hidden input when the visible one changes
        quantityInput.addEventListener('change', function () {
            let value = parseInt(this.value);
            if (value < 1) value = 1;
            if (value > maxStock) value = maxStock;
            this.value = value;
            hiddenQuantityInput.value = value;
        });

        quantityUp.addEventListener('click', function () {
            let currentVal = parseInt(quantityInput.value);
            if (currentVal < maxStock) {
                quantityInput.value = currentVal + 1;
                hiddenQuantityInput.value = currentVal + 1;
            }
        });

        quantityDown.addEventListener('click', function () {
            let currentVal = parseInt(quantityInput.value);
            if (currentVal > 1) {
                quantityInput.value = currentVal - 1;
                hiddenQuantityInput.value = currentVal - 1;
            }
        });
    });
</script>

<style>
    .badge {
        margin-right: 5px;
    }

    .input-group button {
        padding: 0.375rem 0.75rem;
    }

    .card {
        border: none;
        background: #f8f9fa;
    }

    .btn-link {
        color: #000;
        text-decoration: none;
    }

    .btn-link:hover {
        color: #007bff;
    }

    .reviews-list {
        max-height: 400px;
        overflow-y: auto;
    }
</style>